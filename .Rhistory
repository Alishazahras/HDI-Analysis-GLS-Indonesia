library(readxl)
data_women <- read_excel("~/Kuliah/SEMESTER 6/Time Series/data_women.xlsx")
View(data_women)
library(tseries)
library(forecast)
library(ggplot2)
data=data_women
datats=ts(data[2],start=1970, end=2023)
datats
ts.plot(datats)
p <- ggplot(data, aes(x=data$Tahun, y=data$Skor)) +
geom_line()
p
# Split Train-Test
length(datats)
train = datats[1:(0.8*length(datats)]
train = datats[1:(0.8*length(datats))]
train = datats[1:(0.8*length(datats)+1)]
test = datats[1:(0.8*length(datats)+1)]
train
test
train = datats[1:(0.8*length(datats))]
test = datats[(0.8*length(datats)+1:length(datats))]
train
test
print(length(train))
print(length(test))
test = datats[(0.8*length(datats)+1):length(datats)]
print(length(test))
# Train
model_holtwinters_train = HoltWinters(train)
train = ts(train, frequency=1, start=2009, end=2012)
test = ts(test, frequency=1, start=2013, end=2023)
train = ts(train, frequency=1, start=1970, end=2012)
test = ts(test, frequency=1, start=2013, end=2023)
# Train
model_holtwinters_train = HoltWinters(train)
library(tseries)
library(forecast)
library(ggplot2)
data=data_women
datats=ts(data[2],start=1970, end=2023)
datats
ts.plot(datats)
# Split Train-Test
length(datats)
train = datats[1:(0.8*length(datats))]
test = datats[(0.8*length(datats)+1):length(datats)]
print(length(train))
print(length(test))
split_point <- floor(0.8 * length(datats))
train = datats[1:split_point]
test = datats[(split_point+1):length(datats)]
print(length(train))
print(length(test))
train = ts(train, frequency=1, start=1970, end=2012)
test = ts(test, frequency=1, start=2013, end=2023)
train_ts = ts(train, frequency=1, start=1970, end=2012)
test_ts = ts(test, frequency=1, start=2013, end=2023)
print(train_ts)
print(test_ts)
########################## TES ###################################
# Train the ETS model on the training set
model_ets_train <- ets(train_ts)
# Forecast using the trained ETS model
forecast_ets <- forecast(model_ets_train, h=length(test_ts))
# Print the forecasted values
print(forecast_ets)
yhat_ets = forecast_ets$upper
########################## TES ###################################
# Train the ETS model on the training set
model_ets_train <- ets(train_ts)
summary(model_ets_train)
library(tseries)
library(forecast)
library(ggplot2)
data=data_women
datats=ts(data[2],start=1970, end=2023)
datats
ts.plot(datats)
# Split Train-Test
length(datats)
split_point <- floor(0.8 * length(datats))
train = datats[1:split_point]
test = datats[(split_point+1):length(datats)]
print(length(train))
print(length(test))
train_ts = ts(train, frequency=1, start=1970, end=2012)
test_ts = ts(test, frequency=1, start=2013, end=2023)
print(train_ts)
print(test_ts)
model_holtwinters_train <- HoltWinters(train_ts)
plot(data)
decompose(data)
plot(datats)
decompose(data)
decompose(datats)
plot(decompose(datats))
tes1 = HoltWinters(train_ts, alpha = 0.5, beta = 0.1, gamma = 0.8, seasonal = "multiplicative")
summary(test1)
data=data_women
datats=ts(data[2],start=1970, end=2023)
datats
ts.plot(datats)
# Split Train-Test
length(datats)
split_point <- floor(0.8 * length(datats))
train = datats[1:split_point]
test = datats[(split_point+1):length(datats)]
print(length(train))
print(length(test))
train_ts = ts(train, frequency=1, start=1970, end=2012)
test_ts = ts(test, frequency=1, start=2013, end=2023)
print(train_ts)
print(test_ts)
########################## Exponential Smoothing ###################################
# Train the ETS model on the training set
model_ets_train <- ets(train_ts)
summary(model_ets_train)
# Forecast using the trained ETS model
forecast_ets_train <- forecast(model_ets_train, h=length(test_ts))
# Print the forecasted values
print(forecast_ets_train)
yhat_ets = forecast_ets_train$upper
rmse_forecast_ets = sqrt(mean((test - yhat_ets)^2))
rmse_forecast_ets
data=data_women
datats=ts(data[2],start=1970, end=2023)
datats
ts.plot(datats)
# Split Train-Test
length(datats)
split_point <- floor(0.8 * length(datats))
train = datats[1:split_point]
test = datats[(split_point+1):length(datats)]
print(length(train))
print(length(test))
train_ts = ts(train, frequency=1, start=1970, end=2012)
test_ts = ts(test, frequency=1, start=2013, end=2023)
print(train_ts)
print(test_ts)
########################## Exponential Smoothing ###################################
# Train the ETS model on the training set
model_ets_train <- ets(train_ts)
summary(model_ets_train)
# Forecast using the trained ETS model
forecast_ets_train <- forecast(model_ets_train, h=length(test_ts))
# Print the forecasted values
print(forecast_ets_train)
yhat_ets = forecast_ets_train$mean
rmse_forecast_ets <- sqrt(mean((test_ts - yhat_ets)^2))
print("RMSE for forecast:", rmse_forecast_ets)
print(paste("RMSE for forecast:", rmse_forecast_ets))
mse_forecast_ets <- mean((test_ts - yhat_ets)^2)
print(paste("MSE for forecast:", mse_forecast_ets))
mape_forecast_ets <- mean(abs((test_ts - yhat_ets) / test_ts)) * 100
print(paste("MAPE for forecast:", mape_forecast_ets))
mae_forecast_ets <- mean(abs(test_ts - yhat_ets))
print(paste("MAE for forecast:", mae_forecast_ets))
########################## Naive Model #############################################
model_naive_train <- rwf(train_ts, drift = TRUE, h = length(test_ts))
summary(model_naive_train)
########################## Naive Model #############################################
model1_naive_train <- rwf(train_ts, drift = TRUE, h = length(test_ts))
summary(model1_naive_train)
# Plot the fitted model
plot(model1_naive_train)
lines(test_ts, col='red', lty=2)
er_naive_train <- residuals(model1_naive_train)
rmse_naive_train <- sqrt(mean(er_naive_train^2))
print(paste("RMSE for training set:", rmse_naive_train))
er_naive_train
rmse_naive_train
# Forecast using the trained naive model with drift
forecast_naive <- forecast(model_naive_train, h = length(test_ts))
# Extract the forecasted values
yhat_naive <- forecast_naive$mean
# Forecast using the trained naive model with drift
forecast_naive <- forecast(model1_naive_train, h = length(test_ts))
# Extract the forecasted values
yhat_naive <- forecast_naive$mean
# Calculate RMSE for the forecast
rmse_forecast_naive <- sqrt(mean((test_ts - yhat_naive)^2))
print(paste("RMSE for forecast:", rmse_forecast_naive))
# Calculate additional metrics: MAPE, MAE, MSE
mape_forecast_naive <- mean(abs((test_ts - yhat_naive) / test_ts)) * 100
print(paste("MAPE for forecast:", mape_forecast_naive))
mae_forecast_naive <- mean(abs(test_ts - yhat_naive))
print(paste("MAE for forecast:", mae_forecast_naive))
mse_forecast_naive <- mean((test_ts - yhat_naive)^2)
print(paste("MSE for forecast:", mse_forecast_naive))
########################## Exponential Smoothing ###################################
# Train the ETS model on the training set
model_ets_train <- ets(train_ts)
########################## Moving Average ############################################
# Function to perform moving average forecast
moving_average_forecast <- function(train, h, window_size) {
forecast_values <- numeric(h)
for (i in 1:h) {
if (i <= window_size) {
forecast_values[i] <- mean(train[(length(train) - window_size + i - 1):length(train)])
} else {
forecast_values[i] <- mean(forecast_values[(i - window_size):(i - 1)])
}
}
return(forecast_values)
}
# Define the window size for the moving average
window_size <- 1
# Forecast using the moving average model
h <- length(test_ts)
yhat_ma <- moving_average_forecast(train_ts, h, window_size)
# Calculate residuals and RMSE for the training set (using the last window_size values)
er_ma_train <- train_ts[(length(train_ts) - window_size + 1):length(train_ts)] - yhat_ma[1:window_size]
rmse_ma_train <- sqrt(mean(er_ma_train^2))
print(paste("RMSE for training set:", rmse_ma_train))
# Calculate RMSE for the forecast
rmse_forecast_ma <- sqrt(mean((test_ts - yhat_ma)^2))
print(paste("RMSE for forecast:", rmse_forecast_ma))
# Calculate additional metrics: MAPE, MAE, MSE
mape_forecast_ma <- mean(abs((test_ts - yhat_ma) / test_ts)) * 100
print(paste("MAPE for forecast:", mape_forecast_ma))
mae_forecast_ma <- mean(abs(test_ts - yhat_ma))
print(paste("MAE for forecast:", mae_forecast_ma))
mse_forecast_ma <- mean((test_ts - yhat_ma)^2)
print(paste("MSE for forecast:", mse_forecast_ma))
########################## Exponential Smoothing ###################################
# Train the ETS model on the training set
model_ets_train <- ets(train_ts)
# Calculate additional metrics for the training set
mse_ma_train <- mean(er_ma_train^2)
print(paste("MSE for training set:", mse_ma_train))
mape_ma_train <- mean(abs(er_ma_train / train_ts[(length(train_ts) - window_size + 1):length(train_ts)])) * 100
print(paste("MAPE for training set:", mape_ma_train))
mae_ma_train <- mean(abs(er_ma_train))
print(paste("MAE for training set:", mae_ma_train))
########################## Naive Model 2 #############################################
# Function to perform geometric random walk forecast
geometric_random_walk_forecast <- function(train, h) {
last_value <- train[length(train)]
growth_rate <- train[length(train)] / train[length(train) - 1]
forecast_values <- numeric(h)
forecast_values[1] <- last_value * growth_rate
for (i in 2:h) {
forecast_values[i] <- forecast_values[i - 1] * growth_rate
}
return(forecast_values)
}
# Define the window size for the geometric random walk (last two observations)
window_size <- 1
# Forecast using the geometric random walk model
h <- length(test_ts)
yhat_naive2 <- geometric_random_walk_forecast(train_ts, h)
# Calculate RMSE for the forecast
rmse_forecast_naive2 <- sqrt(mean((test_ts - yhat_naive2)^2))
print(paste("RMSE for forecast:", rmse_forecast_naive2))
mse_forecast_naive2 <- mean((test_ts - yhat_naive2)^2)
print(paste("MSE for forecast:", mse_forecast_naive2))
mape_forecast_naive2 <- mean(abs((test_ts - yhat_naive2) / test_ts)) * 100
print(paste("MAPE for forecast:", mape_forecast_naive2))
mae_forecast_naive2 <- mean(abs(test_ts - yhat_naive2))
print(paste("MAE for forecast:", mae_forecast_naive2))
# Calculate metrics for the train set
# Using the last 'window_size' observations to forecast the rest of the training set
train_forecast_values <- numeric(length(train_ts) - window_size)
for (i in (window_size + 1):length(train_ts)) {
growth_rate <- train_ts[i - 1] / train_ts[i - window_size]
train_forecast_values[i - window_size] <- train_ts[i - 1] * growth_rate
}
# Calculate residuals and metrics for the training set
train_residuals <- train_ts[(window_size + 1):length(train_ts)] - train_forecast_values
rmse_train_naive2 <- sqrt(mean(train_residuals^2))
print(paste("RMSE for training set:", rmse_train_naive2))
mse_train_naive2 <- mean(train_residuals^2)
print(paste("MSE for training set:", mse_train_naive2))
mape_train_naive2 <- mean(abs(train_residuals / train_ts[(window_size + 1):length(train_ts)])) * 100
print(paste("MAPE for training set:", mape_train_naive2))
mae_train_naive2 <- mean(abs(train_residuals))
print(paste("MAE for training set:", mae_train_naive2))
########################## Naive Model 2 #############################################
# Calculate metrics for the train set
# Using the last 'window_size' observations to forecast the rest of the training set
train_forecast_values <- numeric(length(train_ts) - window_size)
for (i in (window_size + 1):length(train_ts)) {
growth_rate <- train_ts[i - 1] / train_ts[i - window_size]
train_forecast_values[i - window_size] <- train_ts[i - 1] * growth_rate
}
# Calculate residuals and metrics for the training set
train_residuals <- train_ts[(window_size + 1):length(train_ts)] - train_forecast_values
rmse_train_naive2 <- sqrt(mean(train_residuals^2))
print(paste("RMSE for training set:", rmse_train_naive2))
mse_train_naive2 <- mean(train_residuals^2)
print(paste("MSE for training set:", mse_train_naive2))
########################## Regression ###################################
# Train the ETS model on the training set with additional exogenous variables
model_regresi_train <- lm(train_ts ~ data$Skor)
########################## Regression ###################################
# Train the ETS model on the training set with additional exogenous variables
model_regresi_train <- lm(train_ts ~ data$Skor)
